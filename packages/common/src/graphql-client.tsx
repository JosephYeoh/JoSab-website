// ! #################################################################
// ! #################################################################

// ! ## This File is Auto-Generated, Do not edit this file directy! ##
import * as ApolloReactComponents from '@apollo/react-components';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
import * as React from 'react';
import gql from 'graphql-tag';
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
export type Maybe<T> = T | null;
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;



/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  _?: Maybe<Scalars['Boolean']>;
  articles: Array<Article>;
  books: Array<Book>;
};

export type Book = {
  __typename?: 'Book';
  title?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
};

export type Article = {
  __typename?: 'Article';
  title?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  _?: Maybe<Scalars['Boolean']>;
};

export type Subscribtion = {
  __typename?: 'Subscribtion';
  _?: Maybe<Scalars['Boolean']>;
};

export type GetAllArticlesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllArticlesQuery = (
  { __typename?: 'Query' }
  & { articles: Array<(
    { __typename?: 'Article' }
    & GetAllArticlesDataFragment
  )> }
);

export type GetAllArticlesDataFragment = (
  { __typename?: 'Article' }
  & Pick<Article, 'title' | 'author'>
);

export const GetAllArticlesDataFragmentDoc = gql`
    fragment GetAllArticlesData on Article {
  title
  author
}
    `;
export const GetAllArticlesDocument = gql`
    query GetAllArticles {
  articles {
    ...GetAllArticlesData
  }
}
    ${GetAllArticlesDataFragmentDoc}`;
export type GetAllArticlesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetAllArticlesQuery, GetAllArticlesQueryVariables>, 'query'>;

    export const GetAllArticlesComponent = (props: GetAllArticlesComponentProps) => (
      <ApolloReactComponents.Query<GetAllArticlesQuery, GetAllArticlesQueryVariables> query={GetAllArticlesDocument} {...props} />
    );
    

/**
 * __useGetAllArticlesQuery__
 *
 * To run a query within a React component, call `useGetAllArticlesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllArticlesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllArticlesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllArticlesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllArticlesQuery, GetAllArticlesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAllArticlesQuery, GetAllArticlesQueryVariables>(GetAllArticlesDocument, baseOptions);
      }
export function useGetAllArticlesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllArticlesQuery, GetAllArticlesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAllArticlesQuery, GetAllArticlesQueryVariables>(GetAllArticlesDocument, baseOptions);
        }
export type GetAllArticlesQueryHookResult = ReturnType<typeof useGetAllArticlesQuery>;
export type GetAllArticlesLazyQueryHookResult = ReturnType<typeof useGetAllArticlesLazyQuery>;
export type GetAllArticlesQueryResult = ApolloReactCommon.QueryResult<GetAllArticlesQuery, GetAllArticlesQueryVariables>;

      export interface IntrospectionResultData {
        __schema: {
          types: {
            kind: string;
            name: string;
            possibleTypes: {
              name: string;
            }[];
          }[];
        };
      }
      const result: IntrospectionResultData = {
  "__schema": {
    "types": []
  }
};
      export default result;
    